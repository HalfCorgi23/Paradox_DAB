Board类包含：

public int board[11][11]  一个棋盘数组


Win()返回是否胜利  结果为1/0/-1  = 红胜/未胜/蓝胜

GetPlayerBoxes(int player) 返回某一方占有的格子数
GetBoxLiberties(int x,int y)返回某一格的自由度
GetLoctionLeaglity(int x,int y)返回某一边可否占领
GetEdgeOwnerPlayer(int x,int y)返回某个边的所属者
GetBoxOwnerPlayer(int x,int y)返回某个格子的所属者

//定义CB格式


节点:0
空边:10
空格:20
红方占领的边:1
蓝方占领的边:-1
红方占领的格子:2
蓝方占领的格子:-2

竖行	偶	奇
横行	奇	偶
格子	奇  奇
空点	偶	偶


  a b c d e f g h i j k 
a┌┄┬┄┬┄┬┄┬┄┐ 0
b┆■┆■┆■┆■┆■┆ 1
c├┄┼┄┼┄┼┄┼┄┤ 2
d┆■┆■┆■┆■┆■┆ 3
e├┄┼┄┼┄┼┄┼┄┤ 4
f┆■┆■┆■┆■┆■┆ 5
g├┄┼┄┼┄┼┄┼┄┤ 6
h┆■┆■┆■┆■┆■┆ 7
k├┄┼┄┼┄┼┄┼┄┤ 8
l┆■┆■┆■┆■┆■┆ 9
m└┄┴┄┴┄┴┄┴┄┘ 10
 0 1 2 3 4 5 6 7 8 9 10


UCT
由当前局面建立根节点，生成根节点的子节点：
        1.从根节点开始
        2.利用UCB公式计算每个子节点的UCB值，选择最大值的子节点
        3.若此节点不是叶节点，则从此节点开始，重复2
        4.如果叶节点曾被模拟对局过，则为这个叶节点生成子节点。从此节点开始，重复2
          否则对这个叶节点执行模拟，用得到的蒙特卡罗解更新该节点及其祖先节点
        5.回到1，除非时间结束或者达到预设循环次数
        6.从根节点的子节点中挑选平均收益最高的，作为最佳点
